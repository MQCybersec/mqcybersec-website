---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import LogoBlock from "~/components/logo-block.astro";
import ContentSection from "~/components/content-section.astro";
import { getCollection } from "astro:content";

const images = await getCollection("gridImages");
const tallImage = images.find(img => img.id === "tall")?.data ?? null;
const topHorizImage = images.find(img => img.id === "tophoriz")?.data ?? null;
const bottomHorizImage = images.find(img => img.id === "bottomhoriz")?.data ?? null;

const tallImage2 = images.find(img => img.id === "tall2")?.data ?? null;
const topHorizImage2 = images.find(img => img.id === "tophoriz2")?.data ?? null;
const bottomHorizImage2 = images.find(img => img.id === "bottomhoriz2")?.data ?? null;

const tallImage3 = images.find(img => img.id === "tall3")?.data ?? null;
const topHorizImage3 = images.find(img => img.id === "tophoriz3")?.data ?? null;
const bottomHorizImage3 = images.find(img => img.id === "bottomhoriz3")?.data ?? null;

const topHorizImage4 = images.find(img => img.id === "tophoriz4")?.data ?? null;

if (!tallImage || !topHorizImage || !bottomHorizImage) {
  console.error("Missing required images!");
}
---

<ContentSection title="Est. 2020" id="aboutus">
  <LogoBlock slot="eyebrow" inClass="size-48"/>
  <Fragment slot="lead">
    <div class="max-w-xl mx-auto mb-8">
      <p class="text-xl font-extrabold tracking-tight leading-relaxed text-center">
        The <span class="text-primary">MQCyberSec</span> club is the place to be for all 
        <span class="text-primary">Macquarie University</span> students who are interested in 
        <span class="text-primary">cybersecurity</span> and 
        <span class="text-primary">Capture the Flag</span> competitions.
      </p>
    </div>
  </Fragment>

  <div class="scroll-container w-full overflow-hidden relative">
    <div class="scroll-content flex">
      <!-- Original set of images -->
      <div class="flex-none w-full max-w-4xl">
        <div class="grid grid-cols-1 lg:grid-cols-1 gap-8 items-start">
          <div class="grid grid-cols-[1fr,1.5fr] gap-4 h-[600px]">
            <div class="h-full bg-gray-200 rounded-lg overflow-hidden">
              {tallImage && (
                <Image
                  src={tallImage.image}
                  alt={tallImage.title}
                  class="w-full h-full object-cover"
                  data-image-modal
                loading="eager"/>
              )}
            </div>
            <div class="flex flex-col gap-4 h-full">
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1">
                {topHorizImage && (
                  <Image
                    src={topHorizImage.image}
                    alt={topHorizImage.title}
                    class="absolute inset-0 w-full h-full object-cover"
                    data-image-modal
                loading="eager"  />
                )}
              </div>
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1">
                {bottomHorizImage && (
                  <Image
                    src={bottomHorizImage.image}
                    alt={bottomHorizImage.title}
                    class="absolute inset-0 w-full h-full object-cover"
                    data-image-modal
                loading="eager"  />
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- First duplicate -->
      <div class="flex-none w-full max-w-4xl pl-4">
        <div class="grid grid-cols-1 lg:grid-cols-1 gap-8 items-start">
          <div class="grid grid-cols-[1fr,1.5fr] gap-4 h-[600px]">
            <div class="h-full bg-gray-200 rounded-lg overflow-hidden">
              {tallImage2 && (
                <Image
                  src={tallImage2.image}
                  alt={tallImage2.title}
                  class="w-full h-full object-cover"
                  data-image-modal
                loading="eager"/>
              )}
            </div>
            <div class="flex flex-col gap-4 h-full">
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1">
                {topHorizImage2 && (
                  <Image
                    src={topHorizImage2.image}
                    alt={topHorizImage2.title}
                    class="absolute inset-0 w-full h-full object-cover"
                    data-image-modal
                loading="eager"  />
                )}
              </div>
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1">
                {bottomHorizImage2 && (
                  <Image
                    src={bottomHorizImage2.image}
                    alt={bottomHorizImage2.title}
                    class="absolute inset-0 w-full h-full object-cover"
                    data-image-modal
                loading="eager"  />
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Second duplicate -->
      <div class="flex-none w-full max-w-4xl pl-4">
        <div class="grid grid-cols-1 lg:grid-cols-1 gap-8 items-start">
          <div class="grid grid-cols-[1fr,1.5fr] gap-4 h-[600px]">
            <div class="h-full bg-gray-200 rounded-lg overflow-hidden">
              {tallImage3 && (
                <Image
                  src={tallImage3.image}
                  alt={tallImage3.title}
                  class="w-full h-full object-cover"
                  data-image-modal
                loading="eager"/>
              )}
            </div>
            <div class="flex flex-col gap-4 h-full">
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1">
                {topHorizImage3 && (
                  <Image
                    src={topHorizImage3.image}
                    alt={topHorizImage3.title}
                    class="absolute inset-0 w-full h-full object-cover"
                    data-image-modal
                loading="eager"  />
                )}
              </div>
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1">
                {bottomHorizImage3 && (
                  <Image
                    src={bottomHorizImage3.image}
                    alt={bottomHorizImage3.title}
                    class="absolute inset-0 w-full h-full object-cover"
                    data-image-modal
                loading="eager"  />
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Remaining duplicates with empty sources removed -->
      <div class="flex-none w-full max-w-4xl pl-4">
        <div class="grid grid-cols-1 lg:grid-cols-1 gap-8 items-start">
          <div class="grid grid-cols-[1fr,1.5fr] gap-4 h-[600px]">
            <div class="h-full bg-gray-200 rounded-lg overflow-hidden"></div>
            <div class="flex flex-col gap-4 h-full">
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1">
                {topHorizImage4 && (
                  <Image
                    src={topHorizImage4.image}
                    alt={topHorizImage4.title}
                    class="absolute inset-0 w-full h-full object-cover"
                    data-image-modal
                loading="eager"  />
                )}
              </div>
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1"></div>
            </div>
          </div>
        </div>
      </div>

      <div class="flex-none w-full max-w-4xl pl-4 pr-4">
        <div class="grid grid-cols-1 lg:grid-cols-1 gap-8 items-start">
          <div class="grid grid-cols-[1fr,1.5fr] gap-4 h-[600px]">
            <div class="h-full bg-gray-200 rounded-lg overflow-hidden"></div>
            <div class="flex flex-col gap-4 h-full">
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1"></div>
              <div class="relative bg-gray-200 rounded-lg overflow-hidden flex-1"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</ContentSection>

<style>
  .scroll-container {
  position: relative;
  overflow: hidden;
}

.scroll-content {
  display: flex;
  gap: 0;
}

.scroll-item {
  flex: 0 0 auto;
  transform: translateX(0);
  transition: transform 0.5s linear;
}

.scroll-container::before,
.scroll-container::after {
  content: '';
  position: absolute;
  top: 0;
  width: 20%;
  height: 100%;
  z-index: 2;
  pointer-events: none;
}

.scroll-container::before {
  left: 0;
  background: linear-gradient(to right, rgb(15 23 42), transparent);
}

.scroll-container::after {
  right: 0;
  background: linear-gradient(to left, rgb(15 23 42), transparent);
}
  </style>
  
  <script>
function setupInfiniteScroll() {
  const container = document.querySelector('.scroll-container');
  const content = document.querySelector('.scroll-content');
  const items = document.querySelectorAll('.flex-none');
  
  if (!container || !content || items.length === 0) return;

  const itemWidth = items[0].offsetWidth;
  let currentPosition = 0;

  function moveItems() {
    currentPosition -= 1.2; // Move 1px at a time for smooth scrolling
    content.style.transform = `translateX(${currentPosition}px)`;

    // Check each item
    items.forEach((item) => {
      const itemRect = item.getBoundingClientRect();
      const containerRect = container.getBoundingClientRect();
      
      // If an item has moved completely off screen to the left
      if (itemRect.right < containerRect.left) {
        // Calculate the total width of all items
        const totalWidth = itemWidth * items.length;
        
        // Move it to the right end
        currentPosition += itemWidth;
        content.style.transform = `translateX(${currentPosition}px)`;
        
        // Move the element to the end of the content
        content.appendChild(item);
      }
    });

    requestAnimationFrame(moveItems);
  }

  // Start the animation
  requestAnimationFrame(moveItems);
}

// Run setup when DOM is loaded
document.addEventListener('DOMContentLoaded', setupInfiniteScroll);
  </script>
  