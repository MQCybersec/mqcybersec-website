---
import { Icon } from "astro-icon/components";
import ContentSection from "~/components/content-section.astro";
import type { FeatureItem } from "~/types";
import { getCollection } from "astro:content";
import ShowcaseCard from "~/components/showcase-card.astro";

const featuredSites = await getCollection(
  "showcase",
  ({ data }) => "featured" in data,
);
const orderedSites = featuredSites.sort(
  (a, b) => a.data.featured! - b.data.featured!,
);
---

<ContentSection title="Hack Hub" id="hackhub" altBackground={true}>
  <Fragment slot="lead">
    Join our <span class="font-bold text-primary">weekly</span>
    cybersecurity challenges every <span class="font-bold text-primary"
      >Thursday from 5-7 PM</span
    >
    in <span class="font-bold text-primary">Room 113, 4RPD</span>. <span
      class="font-bold text-primary">Open to all skill levels</span
    > - discover the exciting world of <span class="text-primary"
      >ethical hacking</span
    >.
  </Fragment>
  <div
    id="default-carousel"
    class="relative z-10 h-full w-full max-w-5xl space-y-2"
    data-carousel="slide"
  >
    <!-- Carousel wrapper -->
    <div class="relative h-96 overflow-hidden rounded-lg">
      {orderedSites.map((site) => <ShowcaseCard site={site} />)}
    </div>
    <!-- Slider indicators -->
    <div
      class="absolute bottom-5 left-1/2 z-30 flex -translate-x-1/2 space-x-3 rtl:space-x-reverse"
    >
      {
        orderedSites.map((site, index) => (
          <button
            type="button"
            class="h-3 w-3 rounded-full"
            aria-current={index === 0}
            aria-label={`Slide ${index + 1}`}
            data-carousel-slide-to={index}
          />
        ))
      }
    </div>
    <!-- Slider controls -->
    <button
      type="button"
      class="group absolute start-0 top-0 z-30 flex h-full cursor-pointer items-center justify-center px-4 focus:outline-none"
      data-carousel-prev
    >
      <span
        class="inline-flex h-10 w-10 items-center justify-center rounded-full bg-white/30 group-hover:bg-white/50 group-focus:outline-none group-focus:ring-4 group-focus:ring-white dark:bg-gray-800/30 dark:group-hover:bg-gray-800/60 dark:group-focus:ring-gray-800/70"
      >
        <svg
          class="h-4 w-4 text-white dark:text-gray-800 rtl:rotate-180"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 6 10"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M5 1 1 5l4 4"></path>
        </svg>
        <span class="sr-only">Previous</span>
      </span>
    </button>
    <button
      type="button"
      class="group absolute end-0 top-0 z-30 flex h-full cursor-pointer items-center justify-center px-4 focus:outline-none"
      data-carousel-next
    >
      <span
        class="inline-flex h-10 w-10 items-center justify-center rounded-full bg-white/30 group-hover:bg-white/50 group-focus:outline-none group-focus:ring-4 group-focus:ring-white dark:bg-gray-800/30 dark:group-hover:bg-gray-800/60 dark:group-focus:ring-gray-800/70"
      >
        <svg
          class="h-4 w-4 text-white dark:text-gray-800 rtl:rotate-180"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 6 10"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m1 9 4-4-4-4"></path>
        </svg>
        <span class="sr-only">Next</span>
      </span>
    </button>
  </div>
  <div
    id="imageModal"
    class="fixed inset-0 z-[9999] flex hidden items-center justify-center overflow-y-auto bg-black bg-opacity-50"
  >
    <div
      class="relative flex max-h-[60vh] max-w-[60vw] items-center justify-center rounded-xl"
    >
      <img
        id="modalImage"
        src=""
        alt="Zoomed image"
        class="max-h-full max-w-full rounded-xl object-contain"
      />
    </div>
  </div>
</ContentSection>

<style>
  .modal-animate {
    opacity: 0;
    transition: opacity 0.3s ease-out;
  }

  .modal-animate > div {
    transform: scale(0.95);
    transition: transform 0.3s ease-out;
  }

  .modal-animate.modal-visible {
    opacity: 1;
  }

  .modal-animate.modal-visible > div {
    transform: scale(1);
  }

  .modal-animate:not(.modal-visible) {
    pointer-events: none;
  }
</style>

<script>
  const modal = document.getElementById("imageModal");
  const modalImage = document.getElementById("modalImage");

  modal.classList.add("modal-animate");

  function openModal(imageSrc) {
    modal.classList.remove("hidden");
    modalImage.src = imageSrc;
    void modal.offsetHeight;
    // Add visible class to trigger animation
    modal.classList.add("modal-visible");
  }

  function closeModal() {
    modal.classList.remove("modal-visible");
    // Wait for animation to complete before hiding
    setTimeout(() => {
      modal.classList.add("hidden");
    }, 300);
  }

  document.querySelectorAll(".showcase-image").forEach((img) => {
    img.addEventListener("click", () => openModal(img.src));
  });

  modal.addEventListener("click", (e) => {
    if (e.target === modal) closeModal();
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !modal.classList.contains("hidden")) {
      closeModal();
    }
  });
</script>
