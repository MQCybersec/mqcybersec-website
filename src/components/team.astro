---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import ContentSection from "~/components/content-section.astro";
import { getCollection } from "astro:content";

const peopleData = await getCollection("people", ({ data }) => "name" in data);

const roleOrder = [
  "President",
  "Vice President",
  "Treasurer",
  "Secretary",
  "Sponsorship Director",
  "General Executive",
  "Social Media Manager",
  "Content Creator",
];

const teamsByYear = peopleData.reduce(
  (acc, person) => {
    if (person.data && Array.isArray(person.data.enrollments)) {
      person.data.enrollments.forEach((enrollment) => {
        const year = enrollment.year;
        if (!acc[year]) {
          acc[year] = [];
        }
        acc[year].push({
          name: person.data.name,
          role: enrollment.role || "",
          image: person.data.image || null,
          description: person.data.description || null,
          socials: person.data.socials || [],
        });
      });
    }
    return acc;
  },
  {} as Record<
    number,
    Array<{
      name: string;
      role: string;
      image: ImageMetadata | null;
      description: string | null;
      socials: Array<{ platform: string; url: string; icon: string }>;
    }>
  >,
);

Object.keys(teamsByYear).forEach((year) => {
  teamsByYear[year].sort((a: { role: string }, b: { role: string }) => {
    const indexA = roleOrder.indexOf(a.role);
    const indexB = roleOrder.indexOf(b.role);
    return indexA - indexB;
  });
});

const teams = Object.entries(teamsByYear)
  .map(([year, members]) => ({ year: parseInt(year), members }))
  .sort((a, b) => b.year - a.year);

const currentYear = teams[0]?.year;

const truncateDescription = (description: string) => {
  if (!description) return "";
  return description.length > 15
    ? description.substring(0, 20) + "..."
    : description;
};
---

<ContentSection
  title="Our Teams Through the Years"
  id="teams"
  altBackground={false}
>
  <Fragment slot="lead">
    Explore the <span class="text-primary">evolution</span> of our cybersecurity
    team, showcasing our <span class="text-primary">growth</span> and <span
      class="text-primary">dedication</span
    >
    year by year.
  </Fragment>

  <div class="timeline-container">
    <div class="year-buttons" id="yearTabs" role="tablist">
      {
        teams.map((team) => (
          <button
            class:list={["year-button", { active: team.year === currentYear }]}
            role="tab"
            aria-selected={team.year === currentYear}
            aria-controls={`team-${team.year}`}
            data-year={team.year}
          >
            {team.year}
          </button>
        ))
      }
    </div>

    <div class="team-cards-container">
      {
        teams.map((team) => (
          <div
            id={`team-${team.year}`}
            role="tabpanel"
            class:list={[
              "team-card",
              "mt-4",
              { hidden: team.year !== currentYear },
            ]}
          >
            <div class="team-content">
              <h3 class="mb-4 font-bold text-xl">{team.year} Team</h3>
              <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
                {team.members.map((member) => (
                  <div class="team-member transform cursor-pointer rounded-lg border border-[--color-border] p-4 text-center transition-all duration-300 hover:scale-105 hover:shadow-lg">
                    <div class="member-image mx-auto mb-2 h-16 w-16">
                      {member.image ? (
                        <Image
                          src={member.image}
                          alt={member.name}
                          width={64}
                          height={64}
                          class="rounded-full"
                          loading="eager"
                        />
                      ) : (
                        <svg class="h-16 w-16 fill-current" viewBox="0 0 20 20">
                          <path
                            fill-rule="evenodd"
                            d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                            clip-rule="evenodd"
                          />
                        </svg>
                      )}
                    </div>
                    <div class="member-name font-semibold">{member.name}</div>
                    <div class="member-role text-gray-600 text-sm">
                      {member.role}
                    </div>
                    <div class="member-desc text-gray-200 text-xs">
                      {truncateDescription(member.description)}
                    </div>
                    {member.socials && member.socials.length > 0 && (
                      <ul class="member-socials mt-2 flex justify-center space-x-2">
                        {member.socials.map((social) => (
                          <li>
                            <a
                              class="social-link flex size-8 items-center justify-center rounded-full border-2 border-current p-2"
                              href={social.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              data-platform={social.platform}
                            >
                              <span class="sr-only">{social.platform}</span>
                              <Icon class="size-full" name={social.icon} />
                            </a>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))
      }
    </div>

    {/* Modals - these will be moved to document body */}
    <div id="team-member-modals" style="display: none;">
      {
        teams.map((team) =>
          team.members.map((member) => (
            <div
              id={`modal-${member.name.toLowerCase().replace(/\s+/g, "-")}`}
              class="member-modal hidden"
            >
              <div class="modal-content relative w-full max-w-lg rounded-lg bg-[--color-background] p-6 mx-4">
                <button
                  type="button"
                  class="modal-close absolute right-4 top-4 p-2 text-gray-600 hover:text-gray-800"
                  aria-label="Close modal"
                >
                  <svg
                    class="h-6 w-6"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                </button>
                <div class="flex flex-col items-center">
                  <div class="mb-4 h-32 w-32">
                    {member.image ? (
                      <Image
                        src={member.image}
                        alt={member.name}
                        width={128}
                        height={128}
                        class="h-full w-full rounded-full object-cover"
                        loading="eager"
                      />
                    ) : (
                      <svg class="h-32 w-32 fill-current" viewBox="0 0 20 20">
                        <path
                          fill-rule="evenodd"
                          d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                          clip-rule="evenodd"
                        />
                      </svg>
                    )}
                  </div>
                  <h3 class="mb-2 font-bold text-xl">{member.name}</h3>
                  <p class="mb-4 text-gray-600">{member.role}</p>
                  {member.description && (
                    <p class="mb-4 text-center">{member.description}</p>
                  )}
                  {member.socials && member.socials.length > 0 && (
                    <div class="flex justify-center space-x-3">
                      {member.socials.map((social) => (
                        <a
                          class="flex size-12 items-center justify-center rounded-full border-2 border-current p-2"
                          href={social.url}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          <span class="sr-only">{social.platform}</span>
                          <Icon class="size-full" name={social.icon} />
                        </a>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))
        )
      }
    </div>
  </div>
</ContentSection>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Move modals to document body
    const modalsContainer = document.getElementById('team-member-modals');
    if (modalsContainer) {
      const modals = Array.from(modalsContainer.children);
      const documentBody = document.body;
      
      modals.forEach(modal => {
        documentBody.appendChild(modal);
      });
      
      // Remove the now-empty container
      modalsContainer.remove();
    }

    const yearTabs = document.querySelectorAll(".year-button");
    const teamPanels = document.querySelectorAll(".team-card");

    function hideItem(item) {
      item.classList.add("achievement-item-hidden");
      item.classList.remove("achievement-item-visible");
    }

    function showItem(item) {
      item.classList.remove("achievement-item-hidden");
      item.classList.add("achievement-item-visible");
    }

    async function fadeInItems(items) {
      if (items.length === 0) return;
      Array.from(items).forEach((item, index) => {
        hideItem(item);
        setTimeout(() => showItem(item), index * 50);
      });
    }

    yearTabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        const year = tab.getAttribute("data-year");

        yearTabs.forEach((t) => {
          t.classList.remove("active");
          t.setAttribute("aria-selected", "false");
        });

        teamPanels.forEach((panel) => {
          panel.classList.add("hidden");
          panel.querySelectorAll(".team-member").forEach(hideItem);
        });

        tab.classList.add("active");
        tab.setAttribute("aria-selected", "true");

        const selectedPanel = document.getElementById(`team-${year}`);
        if (selectedPanel) {
          selectedPanel.classList.remove("hidden");
          fadeInItems(selectedPanel.querySelectorAll(".team-member"));
        }
      });
    });

    // Initial fade-in for current year
    const visiblePanel = document.querySelector(".team-card:not(.hidden)");
    if (visiblePanel) {
      fadeInItems(visiblePanel.querySelectorAll(".team-member"));
    }

    // Modal functionality
    function closeAllModals() {
      const modals = document.querySelectorAll('.member-modal');
      modals.forEach((modal) => {
        modal.classList.remove('modal-visible');
        modal.classList.add('hidden');
      });
    }

    function openModal(modalId) {
      // Close any existing open modals first
      closeAllModals();

      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove('hidden');
        // Use a small timeout to ensure the display change happens before adding modal-visible
        setTimeout(() => {
          modal.classList.add('modal-visible');
        }, 10);
      }
    }

    // Add click event listeners to team members
    document.querySelectorAll('.team-member').forEach((member) => {
      member.addEventListener('click', (e) => {
        // Prevent opening modal if clicking on a social link
        const socialLink = e.target.closest('.social-link');
        if (socialLink) {
          e.stopPropagation();
          return;
        }

        const memberName = member.querySelector('.member-name').textContent;
        const modalId = `modal-${memberName.toLowerCase().replace(/\s+/g, '-')}`;
        openModal(modalId);
      });
    });

    // Close modal when clicking close button
    document.querySelectorAll('.modal-close').forEach((closeButton) => {
      closeButton.addEventListener('click', (e) => {
        e.stopPropagation();
        closeAllModals();
      });
    });

    // Close modal when clicking outside the modal content
    document.querySelectorAll('.member-modal').forEach((modal) => {
      modal.addEventListener('click', (e) => {
        // Check if the click is directly on the modal (background)
        if (e.target === modal) {
          closeAllModals();
        }
      });
    });

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeAllModals();
      }
    });

    // Debug logging
    console.log('Team members:', document.querySelectorAll('.team-member').length);
    console.log('Modals:', document.querySelectorAll('.member-modal').length);
  });
</script>

<style>
  .timeline-container {
    padding: 20px 0;
    max-width: 1200px;
    margin: 0 auto;
  }

  .year-buttons {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 10px;
    margin-bottom: 20px;
  }

  .year-button {
    padding: 8px 16px;
    border: 2px solid var(--color-primary);
    border-radius: 20px;
    background-color: transparent;
    color: var(--color-text);
    font-weight: bold;
    cursor: pointer;
    transition:
      background-color 0.3s,
      color 0.3s;
  }

  .year-button:hover,
  .year-button.active {
    background-color: var(--color-primary);
    color: white;
  }

  .team-card {
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 20px;
    background-color: var(--color-background);
    width: 100%;
  }

  .team-member {
    will-change: transform, box-shadow;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .team-member::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--color-primary);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
    border-radius: 0.5rem;
  }

  .team-member:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  .team-member:hover::before {
    opacity: 0.05;
  }

  .member-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: none;
    align-items: center;
    justify-content: center;
    background-color: rgba(0, 0, 0, 0.5);
    opacity: 0;
    transition: 
      opacity 0.3s ease-out,
      visibility 0.3s ease-out;
    visibility: hidden;
  }

  @keyframes modalFadeIn {
    from { 
      opacity: 0;
      transform: scale(0.9);
    }
    to { 
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes modalFadeOut {
    from { 
      opacity: 1;
      transform: scale(1);
    }
    to { 
      opacity: 0;
      transform: scale(0.9);
    }
  }

  .member-modal.modal-visible {
    display: flex;
    opacity: 1;
    visibility: visible;
    animation: modalFadeIn 0.3s ease-out forwards;
  }

  .member-modal.hidden {
    animation: modalFadeOut 0.3s ease-out forwards;
    pointer-events: none;
  }

  .member-modal .modal-content {
    width: 100%;
    max-width: 28rem; /* Reduced width */
    max-height: 90vh;
    transform: scale(0.95);
    transition: transform 0.3s ease-out;
    overflow-y: auto;
    position: relative;
    border-radius: 1rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    background-color: var(--color-background, #1f2937);
  }

  .member-modal .modal-content::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
      circle at top right, 
      rgba(var(--color-primary-rgb, 233, 72, 153), 0.2) 0%, 
      transparent 70%
    );
    opacity: 0.5;
    pointer-events: none;
    border-radius: 1rem;
  }

  .member-modal .modal-content > div {
    position: relative;
    z-index: 10;
  }

  .member-modal .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 20;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.1);
    transition: 
      background-color 0.2s ease,
      transform 0.2s ease;
  }

  .member-modal .modal-close:hover {
    background-color: rgba(255, 255, 255, 0.2);
    transform: rotate(90deg);
  }

  .member-modal .modal-close svg {
    width: 1.5rem;
    height: 1.5rem;
    stroke-width: 2;
  }

  .member-image {
    position: relative;
    z-index: 10;
  }

  .member-socials {
    padding: 0.75rem;
    border-radius: 0.75rem;
  }

  .member-socials a {
    transition: 
      transform 0.2s ease,
      background-color 0.2s ease;
  }

  .member-socials a:hover {
    transform: scale(1.1);
    background-color: var(--color-primary, #ec4899);
    color: white;
  }

  @media (max-width: 640px) {
    .member-modal .modal-content {
      width: 95%;
      margin: 0 0.5rem;
    }
  }
</style>