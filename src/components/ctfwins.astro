---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import ContentSection from "~/components/content-section.astro";
import { getImage } from "astro:assets";
import { getCollection } from "astro:content";
import WriteupCard from "~/components/writeups/WriteupCard.astro";

// Fetch CTF competitions data
const competitions = await getCollection("ctfs", ({ data }) => "name" in data);

// Fetch CTF Time rankings data
const ctfTimeData = await getCollection("ctfTimeRankings");
const ctfTimeRankings = ctfTimeData.length > 0 ? ctfTimeData[0].data.rankings : [];

// Sort rankings by year (newest first)
const sortedRankings = [...ctfTimeRankings].sort((a, b) => b.year - a.year);

const ctfWins = competitions.reduce(
  (acc, competition) => {
    if (competition.data && Array.isArray(competition.data.placements)) {
      competition.data.placements.forEach((placement) => {
        const year = placement.year;
        if (!acc[year]) {
          acc[year] = [];
        }
        acc[year].push({
          name: competition.data.name,
          image: competition.data.image || null,
          globalPlacement: placement.globalPlacement,
          totalTeams: placement.totalTeams,
          australiaPlacement: placement.australiaPlacement,
          teamName: placement.teamName || "",
        });
      });
    }
    return acc;
  },
  {} as Record<
    number,
    Array<{
      name: string;
      image: ImageMetadata | null;
      globalPlacement: number;
      totalTeams?: number;
      australiaPlacement?: number;
      teamName: string;
    }>
  >,
);

const years = Object.keys(ctfWins)
  .map((year) => parseInt(year))
  .sort((a, b) => b - a);

const getMedalInfo = (placement: number) => {
  switch (placement) {
    case 1:
      return { emoji: "🥇", color: "text-yellow-400" };
    case 2:
      return { emoji: "🥈", color: "text-gray-400" };
    case 3:
      return { emoji: "🥉", color: "text-amber-700" };
    default:
      return null;
  }
};

const calculatePercentage = (placement: number, total?: number) => {
  if (!total) return null;
  return (placement / total) * 100;
};

const getPlacementInfo = (placement: number, total?: number) => {
  if (!total) return { display: `#${placement}`, percentage: null };

  const percentage = calculatePercentage(placement, total);
  const isTopTen = placement <= 10;
  const medalInfo = getMedalInfo(placement);

  let display = "";
  if (isTopTen) {
    display = `Global Rank: #${placement} / ${total}`;
  } else {
    display = `Global Rank: #${placement} / ${total}`;
  }

  // Pre-calculate the percentage display
  let percentageDisplay = null;
  if (percentage !== null) {
    if (percentage <= 5 && !isTopTen) {
      percentageDisplay = percentage.toFixed(1);
    }
  }

  return {
    display,
    percentage: percentageDisplay,
    medalInfo,
  };
};

const getSortPriority = (competitions: Array<(typeof ctfWins)[number]>) => {
  return competitions.sort((a, b) => {
    // Pre-calculate top placement flags
    const aGlobalTop5 = a.globalPlacement < 6;
    const bGlobalTop5 = b.globalPlacement < 6;
    const aAusTop5 = a.australiaPlacement ? (a.australiaPlacement < 6) : false;
    const bAusTop5 = b.australiaPlacement ? (b.australiaPlacement < 6) : false;

    if (aGlobalTop5 !== bGlobalTop5) return aGlobalTop5 ? -1 : 1;
    if (aGlobalTop5 && bGlobalTop5)
      return a.globalPlacement - b.globalPlacement;

    if (aAusTop5 !== bAusTop5) return aAusTop5 ? -1 : 1;
    if (aAusTop5 && bAusTop5)
      return (a.australiaPlacement || 0) - (b.australiaPlacement || 0);

    const aPercentage =
      calculatePercentage(a.globalPlacement, a.totalTeams) || 100;
    const bPercentage =
      calculatePercentage(b.globalPlacement, b.totalTeams) || 100;

    return aPercentage - bPercentage;
  });
};

const displayPercentage = (percentage: number) => {
 return percentage !== null ? (percentage <= 10 ? percentage.toFixed(1) : '') : '';
}

// Optionally fetch a few recent writeups to display
const recentWriteups = await getCollection("writeups", ({ data }) => !data.hidden)
  .then(writeups => writeups
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    .slice(0, 3)
  );

---

<!-- CTF Time Rankings Section -->
<ContentSection title="CTF Time Rankings" id="ctf-rankings" altBackground={true}>
  <Fragment slot="lead">
    Our team's <span class="text-primary">global</span> and <span class="text-primary">regional</span> 
    standings on <a href="https://ctftime.org/" target="_blank" rel="noopener" class="text-primary hover:underline">CTFTime</a>.
  </Fragment>

  <div class="max-w-6xl mx-auto mb-16">
    <ul class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
      {
        // Process rankings data before rendering to avoid JSX fragment issues
        sortedRankings.map((ranking) => {
          // Pre-calculate all values
          const globalMedalInfo = getMedalInfo(ranking.globalRank);
          const countryMedalInfo = ranking.countryRank ? getMedalInfo(ranking.countryRank) : null;
          const percentage = calculatePercentage(ranking.globalRank, ranking.totalTeams);
          const percentageDisplay = displayPercentage(percentage);
          const globalRankDisplay = ranking.totalTeams ? ` / ${ranking.totalTeams}` : '';
          
          // Render the card
          return (
            <li class="achievement-item flex flex-col items-center gap-4 rounded-lg border border-default bg-offset p-6">
              <div class="relative size-16">
                <div class="size-full rounded-full border-2 border-current p-3">
                  <Icon name="mdi:trophy-award" class="size-full" />
                </div>
              </div>
              <p class="text-center font-extrabold text-xl">
                {ranking.year} Rankings
              </p>
              <div class="space-y-3 text-center text-offset text-sm">
                <div class="space-y-1">
                  <p class="font-medium text-base">
                    {ranking.teamName}
                  </p>
                  {ranking.countryRank && (
                    <p class={countryMedalInfo?.color || ""}>
                      {countryMedalInfo?.emoji} {ranking.countryName} Rank: #{ranking.countryRank}
                    </p>
                  )}
                  <p class={globalMedalInfo?.color}>
                    {globalMedalInfo?.emoji} Global Rank: #{ranking.globalRank}{globalRankDisplay}
                  </p>
                  {percentageDisplay && (
                    <p class="text-primary">
                      Top {percentageDisplay}% Globally
                    </p>
                  )}
                </div>
              </div>
            </li>
          );
        })
      }
    </ul>
  </div>
</ContentSection>

<!-- Original CTF Achievements Section -->
<ContentSection title="CTF Achievements" id="ctf-achievements">
  <Fragment slot="lead">
    Our team has <span class="text-primary">excelled</span> in various Capture The
    Flag competitions, demonstrating our <span class="text-primary">skills</span
    > and <span class="text-primary">expertise</span>
    in cybersecurity challenges.
  </Fragment>

  <div class="timeline-container relative mx-auto max-w-6xl pb-16">
    <div
      class="ctf-year-buttons mb-8 flex flex-wrap justify-center gap-4"
      id="ctfyearbuttons"
    >
      {
        years.map((year) => (
          <button
            class="ctf-year-button rounded-full border-2 border-primary px-6 py-2 font-bold transition-colors hover:bg-primary hover:text-white"
            data-year={year}
          >
            {year}
          </button>
        ))
      }
    </div>

    {
      Object.entries(ctfWins)
        .sort(([a], [b]) => Number(b) - Number(a))
        .map(([year, competitions]) => {
          const sortedCompetitions = getSortPriority(competitions);
          const totalPages = Math.ceil(sortedCompetitions.length / 9);

          return (
            <div
              class="achievement-grid hidden"
              data-year={year}
              data-total-pages={totalPages}
            >
              <h3 class="ctf-year-achievements-text mb-8 text-center font-bold text-2xl">
                {year} Achievements
              </h3>

              <div class="min-h-[2400px] md:min-h-[1200px] lg:min-h-[850px]">
                {Array.from({ length: totalPages }).map((_, pageIndex) => (
                  <div
                    class="achievement-page hidden w-full"
                    data-page={pageIndex + 1}
                  >
                    <ul class="achievement-list grid w-full grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
                      {sortedCompetitions
                        .slice(pageIndex * 9, (pageIndex + 1) * 9)
                        .map((competition) => {
                          const placementInfo = getPlacementInfo(
                            competition.globalPlacement,
                            competition.totalTeams,
                          );
                          const aussieMedalInfo = competition.australiaPlacement
                            ? getMedalInfo(competition.australiaPlacement)
                            : null;

                          return (
                            <li class="achievement-item flex w-full flex-col items-center gap-4 rounded-lg border border-default bg-offset p-6">
                              <div class="relative size-16">
                                {competition.image ? (
                                  <div class="absolute inset-0 overflow-hidden rounded-full border-2 border-current">
                                    <Image
                                      src={competition.image}
                                      alt={`${competition.name} Icon`}
                                      width={64}
                                      height={64}
                                      class="size-full object-cover"
                                      loading="eager"
                                    />
                                  </div>
                                ) : (
                                  <div class="size-full rounded-full border-2 border-current p-3">
                                    <Icon name="mdi:trophy" class="size-full" />
                                  </div>
                                )}
                              </div>
                              <p class="text-center font-extrabold text-xl">
                                {competition.name}
                              </p>
                              <div class="space-y-3 text-center text-offset text-sm">
                                <div class="space-y-1">
                                  {competition.teamName && (
                                    <p class="font-medium text-base">
                                      {competition.teamName}
                                    </p>
                                  )}
                                  {competition.australiaPlacement && (
                                    <p
                                      class={`${aussieMedalInfo?.color || ""}`}
                                    >
                                      {aussieMedalInfo?.emoji} Australia Rank: #
                                      {competition.australiaPlacement}
                                    </p>
                                  )}
                                  <p class={placementInfo.medalInfo?.color}>
                                    {placementInfo.medalInfo?.emoji}{" "}
                                    {placementInfo.display}
                                  </p>
                                  {placementInfo.percentage &&
                                    (competition.australiaPlacement ? (
                                      <p class="text-primary">
                                        Top {placementInfo.percentage}% Globally
                                      </p>
                                    ) : (
                                      <p class="text-primary">
                                        Top {placementInfo.percentage}%
                                      </p>
                                    ))}
                                </div>
                              </div>
                            </li>
                          );
                        })}
                    </ul>
                  </div>
                ))}
              </div>

              {totalPages > 1 && (
                <div class="mt-8 flex items-center justify-center gap-4">
                  <button
                    class="prev-page rounded-lg border-2 border-primary px-4 py-2 font-bold disabled:cursor-not-allowed disabled:opacity-50"
                    disabled
                  >
                    ←
                  </button>
                  <span class="page-indicator font-medium">
                    Page 1/{totalPages}
                  </span>
                  <button
                    class="next-page rounded-lg border-2 border-primary px-4 py-2 font-bold disabled:cursor-not-allowed disabled:opacity-50"
                    disabled={totalPages <= 1}
                  >
                    →
                  </button>
                </div>
              )}
            </div>
          );
        })
    }
  </div>
</ContentSection>
<script>
  const observerOptions = {
    root: null,
    rootMargin: "-20% 0px -20% 0px",
    threshold: 0,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("achievement-item-visible");
        entry.target.classList.remove("achievement-item-hidden");
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  document.addEventListener("DOMContentLoaded", () => {
    // Observe the CTF Achievements section for animation
    const section = document.querySelector(".timeline-container");
    if (section) {
      section.classList.add("achievement-item-hidden");
      observer.observe(section);
    }
    
    // Make sure CTF Time rankings items are visible on page load
    const ctfTimeItems = document.querySelectorAll("#ctf-rankings .achievement-item");
    ctfTimeItems.forEach((item) => {
      item.classList.add("achievement-item-visible");
    });
  });
</script>
<script>
  const yearButtons = document.querySelectorAll(".ctf-year-button");
  const achievementGrids = document.querySelectorAll(".achievement-grid");
  const ctfYearAchievementTextLatest = document.querySelectorAll(
    ".ctf-year-achievements-text",
  )[0];

  let currentAnimation: { cancel: () => void } | null = null;
  let isAnimating = false;

  function hideItem(item) {
    item.classList.add("achievement-item-hidden");
    item.classList.remove("achievement-item-visible");
  }

  function showItem(item) {
    item.classList.remove("achievement-item-hidden");
    item.classList.add("achievement-item-visible");
  }

  function updateNavigationButtons() {
    achievementGrids.forEach((grid) => {
      const currentPage = parseInt(
        grid.getAttribute("data-current-page") || "1",
      );
      const totalPages = parseInt(grid.getAttribute("data-total-pages") || "1");
      const prevButton = grid.querySelector(".prev-page");
      const nextButton = grid.querySelector(".next-page");

      if (prevButton) {
        prevButton.disabled = currentPage === 1;
      }
      if (nextButton) {
        nextButton.disabled = currentPage === totalPages;
      }
    });
  }

  async function animateItems(items: Iterable<unknown> | ArrayLike<unknown>) {
    if (currentAnimation) {
      currentAnimation.cancel();
    }

    const itemsArray = Array.from(items);
    if (itemsArray.length === 0) return;

    isAnimating = true;
    updateNavigationButtons();

    itemsArray.forEach(hideItem);

    await new Promise((resolve) => requestAnimationFrame(resolve));
    await new Promise((resolve) => requestAnimationFrame(resolve));

    let cancelled = false;

    const animations = itemsArray.map((item, index) => {
      return new Promise<void>((resolve) => {
        setTimeout(() => {
          if (!cancelled) {
            showItem(item);

            item.addEventListener(
              "animationend",
              () => {
                resolve();
              },
              { once: true },
            );
          } else {
            resolve();
          }
        }, index * 50);
      });
    });

    currentAnimation = {
      cancel: () => {
        cancelled = true;
        itemsArray.forEach(hideItem);
      },
    };

    await Promise.all(animations);
    if (!cancelled) {
      currentAnimation = null;
      isAnimating = false;
      updateNavigationButtons();
    }
  }

  async function showYear(year: string | null) {
    yearButtons.forEach((button) => {
      if (button.getAttribute("data-year") === year) {
        button.classList.add("bg-primary", "text-white");
      } else {
        button.classList.remove("bg-primary", "text-white");
      }
    });

    achievementGrids.forEach((grid) => {
      grid.classList.add("hidden");
      grid.querySelectorAll(".achievement-item").forEach(hideItem);
    });

    const targetGrid = Array.from(achievementGrids).find(
      (grid) => grid.getAttribute("data-year") === year,
    );

    if (targetGrid) {
      targetGrid.classList.remove("hidden");
      await showPage(targetGrid, 1);
    }
  }

  async function showPage(grid: Element, pageNumber: number) {
    const pages = grid.querySelectorAll(".achievement-page");
    const totalPages = parseInt(grid.getAttribute("data-total-pages") || "1");

    const pageIndicator = grid.querySelector(".page-indicator");

    if (pageIndicator) {
      pageIndicator.textContent = `Page ${pageNumber}/${totalPages}`;
    }
    updateNavigationButtons();

    grid.setAttribute("data-current-page", pageNumber.toString());

    pages.forEach((page) => {
      page.classList.add("hidden");
      page.querySelectorAll(".achievement-item").forEach(hideItem);
    });

    const targetPage = Array.from(pages).find(
      (page) => parseInt(page.getAttribute("data-page") || "1") === pageNumber,
    );

    if (targetPage) {
      targetPage.classList.remove("hidden");
      const items = targetPage.querySelectorAll(".achievement-item");
      await animateItems(items);
    }
  }

  // Event listeners
  yearButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const year = button.getAttribute("data-year");
      if (year) showYear(year);
    });
  });

  achievementGrids.forEach((grid) => {
    const prevButton = grid.querySelector(".prev-page");
    const nextButton = grid.querySelector(".next-page");

    prevButton?.addEventListener("click", () => {
      const currentPage = parseInt(
        grid.getAttribute("data-current-page") || "1",
      );
      if (currentPage > 1) {
        yearButtons[0].scrollIntoView({ behavior: "smooth", block: "start" });
        showPage(grid, currentPage - 1);
      }
    });

    nextButton?.addEventListener("click", () => {
      const currentPage = parseInt(
        grid.getAttribute("data-current-page") || "1",
      );
      const totalPages = parseInt(grid.getAttribute("data-total-pages") || "1");
      if (currentPage < totalPages) {
        yearButtons[0].scrollIntoView({ behavior: "smooth", block: "start" });
        showPage(grid, currentPage + 1);
      }
    });
  });

  // Initial setup
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("#ctf-achievements .achievement-item").forEach(hideItem);

    if (yearButtons.length > 0) {
      const firstYear = yearButtons[0].getAttribute("data-year");
      if (firstYear) showYear(firstYear);
    }
  });
</script>

<style>
  .timeline-container {
    transition:
      opacity 0.8s ease-out,
      transform 0.8s ease-out;
    transform: translateY(20px);
  }

  .achievement-item {
    will-change: opacity, transform;
  }

  .achievement-item-hidden {
    opacity: 0;
    transform: translateY(20px);
  }

  .achievement-item-visible {
    animation: fadeInUp 300ms ease-out forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .achievement-grid,
  .achievement-page {
    opacity: 1 !important;
    transform: none !important;
  }
  
  /* CTF Time Rankings styling */
  #ctf-rankings {
    margin-bottom: 1rem;
  }
  
  #ctf-rankings .achievement-item {
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
  }
  
  #ctf-rankings .achievement-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
  }
</style>

<ContentSection title="CTF Writeups" id="ctf-writeups" altBackground={true}>
  <Fragment slot="lead">
    Explore our <span class="text-primary">detailed writeups</span> for various CTF challenges we've solved and learn from our <span class="text-primary">experiences</span>.
  </Fragment>

  <div class="mx-auto max-w-8xl">
    <div class="mb-8 flex flex-col items-center">
      
      {recentWriteups.length > 0 && (
        <div class="w-full grid grid-cols-1 md:grid-cols-3 gap-8 mb-8">
          {recentWriteups.map((writeup) => (
            <WriteupCard writeup={writeup} />
          ))}
        </div>
      )}

      <a 
        href="/writeups" 
        class="ctf-writeups-btn group inline-flex items-center gap-2 rounded-full bg-primary px-6 py-3 text-white font-medium hover:bg-primary-dark transition-colors"
      >
        Browse All Writeups
        <Icon name="mdi:arrow-right" class="size-5 transition-transform group-hover:translate-x-1" />
      </a>
    </div>
  </div>
</ContentSection>

<style>
  .bg-primary-dark {
    background-color: var(--color-primary-dark, hsl(var(--color-primary-hue, 240), var(--color-primary-saturation, 100%), calc(var(--color-primary-lightness, 50%) - 10%)));
  }

  .ctf-writeups-btn {
    padding: 8px 16px;
    border: 2px solid var(--color-primary);
    border-radius: 20px;
    background-color: transparent;
    color: var(--color-text);
    font-weight: bold;
    cursor: pointer;
    transition:
      background-color 0.3s,
      color 0.3s,
      transform 0.2s ease;
  }

  .ctf-writeups-btn:hover {
    background-color: var(--color-primary);
    color: white;
    transform: translateY(-2px);
  }

  .ctf-writeups-btn:hover .icon {
    transform: translateX(0.25rem);
  }
</style>